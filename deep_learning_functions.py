# -*- coding: utf-8 -*-
"""deep_learning_functions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16-KGPGyIukw-BmN7Q52lNjalo0EXWaCz
"""

#*******************************************************************************************
 #
 #  File Name:  deep_learning_functions.py
 #
 #  File Description:
 #      This Python script, deep_learning_functions.py, contains generic Python functions
 #      for completing common neural network configuration tasks.  Here is the list:
 #
 #      set_features_integer
 #      return_features_integer
 #      return_feature_series_and_sorted_count_list
 #      return_binned_dataframe_from_one_column
 #      return_binned_dataframe
 #      return_neural_network_xy_parameters
 #      return_neural_network_model
 #      return_best_model_dictionary
 #
 #
 #  Date            Description                             Programmer
 #  ----------      ------------------------------------    ------------------
 #  12/02/2023      Initial Development                     Nicholas J. George
 #
 #******************************************************************************************/

import deep_learning_constants
import log_subroutines

import pandas as pd

from silence_tensorflow import silence_tensorflow
silence_tensorflow()

import keras_tuner as kt
import tensorflow as tf

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

CONSTANT_LOCAL_FILE_NAME = 'deep_learning_functions.py'

#*******************************************************************************************
 #
 #  Function Name:  set_features_integer
 #
 #  Function Description:
 #      This function sets the global variable, features_integer.
 #
 #  Function Parameters:
 #
 #  Type    Name            Description
 #  -----   -------------   ----------------------------------------------
 #  integer
 #          new_features_integer
 #                          The parameter is the new value for the global variable.
 #
 #
 #  Date                Description                                 Programmer
 #  ---------------     ------------------------------------        ------------------
 #  12/02/2023          Initial Development                         Nicholas J. George
 #
 #******************************************************************************************/

def set_features_integer(new_features_integer):

    deep_learning_constants.features_integer = new_features_integer

#*******************************************************************************************
 #
 #  Function Name:  return_features_integer
 #
 #  Function Description:
 #      This function returns the global variable, features_integer.
 #
 #
 #  Return Type: integer
 #
 #
 #  Function Parameters:
 #
 #  Type    Name            Description
 #  -----   -------------   ----------------------------------------------
 #  n/a     n/a             n/a
 #
 #
 #  Date                Description                                 Programmer
 #  ---------------     ------------------------------------        ------------------
 #  12/02/2023          Initial Development                         Nicholas J. George
 #
 #******************************************************************************************/

def return_features_integer():

        return deep_learning_constants.features_integer

#*******************************************************************************************
 #
 #  Function Name:  return_feature_series_and_sorted_count_list
 #
 #  Function Description:
 #      This function receives a DataFrame and column name and returns the column
 #      as a Series and a sorted list of unique values from the Series.
 #
 #
 #  Return Type: series, list
 #
 #
 #  Function Parameters:
 #
 #  Type    Name            Description
 #  -----   -------------   ----------------------------------------------
 #  dataframe
 #          input_dataframe
 #                          The parameter is the input DataFrame.
 #  string
 #          column_name_string
 #                          This parameter is the DataFrame column name.
 #
 #
 #  Date                Description                                 Programmer
 #  ---------------     ------------------------------------        ------------------
 #  12/02/2023          Initial Development                         Nicholas J. George
 #
 #******************************************************************************************/

def return_feature_series_and_sorted_count_list \
        (input_dataframe,
         column_name_string):

    try:

        temp_series \
            = input_dataframe[column_name_string] \
                .value_counts() \
                .sort_values(ascending = False)

        temp_series.name = column_name_string


        value_count_integer_list = sorted(temp_series.unique().tolist())

        value_count_integer_list.insert(0, 0)


        return temp_series, value_count_integer_list

    except:

        log_subroutines \
            .print_and_log_text \
                (f'The function, return_feature_series_and_sorted_count_list, '
                 + f'in source file, {CONSTANT_LOCAL_FILE_NAME}, '
                 + f'was unable to return the column Series and sorted value count List.')

        return None

#*******************************************************************************************
 #
 #  Function Name:  return_binned_dataframe_for_one_column
 #
 #  Function Description:
 #      This function returns one binned column for a input dataframe.
 #
 #
 #  Return Type: dataframe
 #
 #
 #  Function Parameters:
 #
 #  Type    Name            Description
 #  -----   -------------   ----------------------------------------------
 #  dataframe
 #          input_dataframe
 #                          The parameter is the input dataframe.
 #  series
 #          input_series
 #                          The parameter is the input Series for the DataFrame column.
 #  list
 #          input_count_integer_list
 #                          The parameter is the sorted list of unique values for
 #                          the dataframe column.
 #  String
 #          column_name_string
 #                          This parameter is the dataframe column name.
 #  Integer
 #          count_integer
 #                          This parameter is the binning limit.
 #
 #
 #  Date                Description                                 Programmer
 #  ---------------     ------------------------------------        ------------------
 #  12/02/2023          Initial Development                         Nicholas J. George
 #
 #******************************************************************************************/

def return_binned_dataframe_for_one_column \
        (input_dataframe,
         input_series,
         input_count_integer_list,
         column_name_string,
         count_integer):

    try:

        if count_integer == 0:

            return input_dataframe

        elif len(input_count_integer_list) == 3 \
          and count_integer != max(input_count_integer_list):

            return input_dataframe

        elif count_integer == max(input_count_integer_list):

            input_dataframe.drop([column_name_string], axis = 1, inplace = True)

            return input_dataframe


        types_to_replace_list = list(input_series[input_series < count_integer].index)


        for types_to_replace in types_to_replace_list:

            input_dataframe[column_name_string] \
                = input_dataframe[column_name_string].replace(types_to_replace, 'Other')

        return input_dataframe

    except:

        log_subroutines \
            .print_and_log_text \
                (f'The function, return_binned_dataframe_for_one_column, '
                 + f'in source file, {CONSTANT_LOCAL_FILE_NAME}, '
                 + f'was unable to return a binned DataFrame from one column.')

        return None

#*******************************************************************************************
 #
 #  Function Name:  return_binned_dataframe
 #
 #  Function Description:
 #      This function returns one binned column for a input dataframe.
 #
 #
 #  Return Type: dataframe
 #
 #
 #  Function Parameters:
 #
 #  Type    Name            Description
 #  -----   -------------   ----------------------------------------------
 #  dataframe
 #          input_dataframe
 #                          The parameter is the input dataframe.
 #  list
 #          input_series_list
 #                          The parameter is the list of input series for
 #                          the dataframe columns.
 #  list of lists
 #          input_count_integer_list_list
 #                          The parameter is the sorted list of unique values
 #                          for the dataframe column.
 #  string
 #          column_name_string_list
 #                          This parameter is the list of dataframe column names.
 #  integer
 #          count_integer_list
 #                          This parameter is the list of binning limits.
 #
 #
 #  Date                Description                                 Programmer
 #  ---------------     ------------------------------------        ------------------
 #  12/02/2023          Initial Development                         Nicholas J. George
 #
 #******************************************************************************************/

def return_binned_dataframe \
        (input_dataframe,
         input_series_list,
         input_count_integer_list_list,
         column_name_string_list,
         count_integer_list):

    try:

        temp_dataframe = input_dataframe.copy()

        for index, input_series in enumerate(input_series_list):

            temp_dataframe \
                = return_binned_dataframe_for_one_column \
                    (temp_dataframe,
                     input_series,
                     input_count_integer_list_list[index],
                     column_name_string_list[index],
                     count_integer_list[index])

        return temp_dataframe

    except:

        log_subroutines \
            .print_and_log_text \
                (f'The function, return_binned_dataframe, '
                 + f'in source file, {CONSTANT_LOCAL_FILE_NAME}, '
                 + f'was unable to return a binned DataFrame.')

        return None

#*******************************************************************************************
 #
 #  Function Name:  return_neural_network_xy_parameters
 #
 #  Function Description:
 #      This function returns one training and testing X-Y parameters for a neural network.
 #
 #
 #  Return Type: nparray, nparray, nparray, nparray
 #
 #
 #  Function Parameters:
 #
 #  Type    Name            Description
 #  -----   -------------   ----------------------------------------------
 #  dataframe
 #          input_dataframe
 #                          The parameter is the input dataframe.
 #  string
 #          outcome_column_name_string
 #                          The parameter is the columns name for the y-variable.
 #
 #
 #  Date                Description                                 Programmer
 #  ---------------     ------------------------------------        ------------------
 #  12/02/2023          Initial Development                         Nicholas J. George
 #
 #******************************************************************************************/

def return_neural_network_xy_parameters \
      (input_dataframe,
       outcome_column_name_string):

    try:

        dummies_dataframe = pd.get_dummies(input_dataframe)

        y_nparray = dummies_dataframe[outcome_column_name_string].values

        x_nparray = dummies_dataframe.drop([outcome_column_name_string], axis = 1).values

        x_train_nparray, \
        x_test_nparray, \
        y_train_nparray, \
        y_test_nparray \
          = train_test_split(x_nparray, y_nparray, random_state = 21)

        current_standard_scalar = StandardScaler()

        x_standard_scalar = current_standard_scalar.fit(x_train_nparray)

        x_train_scaled_nparray = x_standard_scalar.transform(x_train_nparray)

        x_test_scaled_nparray = x_standard_scalar.transform(x_test_nparray)

        return x_train_scaled_nparray, x_test_scaled_nparray, \
               y_train_nparray, y_test_nparray

    except:

        log_subroutines \
            .print_and_log_text \
                (f'The function, return_neural_network_xy_parameters, '
                 + f'in source file, {CONSTANT_LOCAL_FILE_NAME}, '
                 + f"was unable to return a the neural network's X-Y parameters.")

        return None, None, None, None

#*******************************************************************************************
 #
 #  Function Name:  return_neural_network_model
 #
 #  Function Description:
 #      This function returns one neural network model for analysis.
 #
 #
 #  Return Type: tf.keras.models.Sequential()
 #
 #
 #  Function Parameters:
 #
 #  Type    Name            Description
 #  -----   -------------   ----------------------------------------------
 #  hyperband
 #          hp
 #                          The parameter is the input Tensorflow Hyperband object.
 #
 #
 #  Date                Description                                 Programmer
 #  ---------------     ------------------------------------        ------------------
 #  12/02/2023          Initial Development                         Nicholas J. George
 #
 #******************************************************************************************/

def return_neural_network_model(hp):

    try:

        input_features_integer = return_features_integer()

        neural_net_sequential_model = tf.keras.models.Sequential()

        activation_choice \
            = hp.Choice \
                ('activation',
                 ['relu',
                  'sigmoid',
                  'tanh'])

        neural_net_sequential_model \
            .add \
                (tf.keras.layers.Dense \
                    (units \
                         = hp.Int \
                             ('first_units',
                              min_value = 1,
                              max_value = 100,
                              step = 1),
                     activation = activation_choice,
                     input_dim = input_features_integer))

        for index in range(hp.Int('num_layers', 1, 5)):

            neural_net_sequential_model \
                .add \
                    (tf.keras.layers.Dense \
                         (units \
                              = hp.Int \
                                  ('units_' + str(index),
                                   min_value = 1,
                                   max_value = 100,
                                   step = 1),
                                   activation = activation_choice))

        neural_net_sequential_model.add \
          (tf.keras.layers.Dense(units = 1, activation = 'sigmoid'))

        learning_rate_float \
            = hp.Float \
                ('learning_rate',
                 min_value = 1e-4,
                 max_value = 1e-2,
                 sampling = 'linear')

        neural_net_sequential_model \
            .compile \
                (loss = 'binary_crossentropy',
                 optimizer = tf.keras.optimizers.Adam(learning_rate = learning_rate_float),
                 metrics = ['accuracy'])


        return neural_net_sequential_model

    except:

        log_subroutines \
            .print_and_log_text \
                (f'The function, return_neural_network_model, '
                 + f'in source file, {CONSTANT_LOCAL_FILE_NAME}, '
                 + f'was unable to return a neural network model.')

        return None

#*******************************************************************************************
 #
 #  Function Name:  return_best_model_dictionary
 #
 #  Function Description:
 #      This function returns one training and testing X-Y parameters for a neural network.
 #
 #
 #  Return Type: dictionary
 #
 #
 #  Function Parameters:
 #
 #  Type    Name            Description
 #  -----   -------------   ----------------------------------------------
 #  nparray
 #          x_train_scaled_nparray
 #                          The parameter is the training array for the x-variable.
 #  nparray
 #          x_test_scaled_nparray
 #                          The parameter is the testing array for the x-variable.
 #  nparray
 #          y_train_nparray
 #                          The parameter is the training array for the y-variable.
 #  nparray
 #          y_test_nprray
 #                          The parameter is the testing array for the y-variable.
 #  string
 #          objective_string
 #                          The parameter is the objective of the analysis
 #                          (i.e., val_accuracy).
 #  integer
 #          max_epochs_integer
 #                          The parameter is the maximum number of epochs for the
 #                          compiling phase.
 #  integer
 #          hyperband_iterations_integer
 #                          The parameter is the number of iterations for the hyperband
 #                          function.
 #  integer
 #          top_model_count_integer
 #                          The parameter is the number of top final models from the
 #                          analysis.
 #
 #
 #  Date                Description                                 Programmer
 #  ---------------     ------------------------------------        ------------------
 #  12/02/2023          Initial Development                         Nicholas J. George
 #
 #******************************************************************************************/

def return_best_model_dictionary \
        (x_train_scaled_nparray, \
         x_test_scaled_nparray, \
         y_train_nparray, \
         y_test_nprray,
         objective_string,
         max_epochs_integer,
         hyperband_iterations_integer,
         top_model_count_integer):

    try:

        tuner_hyperband \
            = kt.Hyperband \
                (return_neural_network_model,
                 objective = objective_string,
                 max_epochs = max_epochs_integer,
                 hyperband_iterations = hyperband_iterations_integer,
                 overwrite = True)

        tuner_hyperband.search \
            (x_train_scaled_nparray,
             y_train_nparray,
             epochs = max_epochs_integer,
             validation_data = (x_test_scaled_nparray, y_test_nprray))

        top_hyperparameters_list \
          = tuner_hyperband.get_best_hyperparameters(top_model_count_integer)

        top_model_list \
          = tuner_hyperband.get_best_models(top_model_count_integer)

        log_subroutines \
            .print_and_log_text \
              (f'\nTop {top_model_count_integer} models:\n\n')

        for model in top_model_list:

            model_loss_float, model_accuracy_float \
                = model.evaluate \
                    (x_test_scaled_nparray, y_test_scaled_nprray, verbose = 2)

            log_subroutines \
              .print_and_log_text \
                (f'\nModel Loss: {round(model_loss_float * 100, 2)}%, '
                 + f'Model Accuracy: {round(model_accuracy_float * 100, 2)}%\n\n')

        best_hyperparameters = tuner_hyperband.get_best_hyperparameters()[0]

        best_model_neural_net_sequential = top_model_list[0]

        best_model_loss_float, best_model_accuracy_float \
            = best_model_neural_net_sequential \
                .evaluate(x_test_scaled_nparray, y_test_scaled_nprray, verbose = 2)

        log_subroutines \
            .print_and_log_text \
                (f'\nModel Loss: {round(best_model_loss_float * 100, 2)}%, '
                 + f'Model Accuracy: {round(best_model_accuracy_float * 100, 2)}%\n'
                 + best_hyperparameters.values)



        temp_dictionary \
            = {'accuracy': best_model_loss_float,
               'loss': best_model_accuracy_float,
               'hyperparameters': best_hyperparameters.values,
               'duration': '',
               'count_list': [],
               'max_count_list': []}

        return temp_dictionary

    except:

        log_subroutines \
            .print_and_log_text \
                (f'The function, return_best_model_dictionary, '
                 + f'in source file, {CONSTANT_LOCAL_FILE_NAME}, '
                 + f'was unable to return Dictionary with the best model parameters.')

        return None

